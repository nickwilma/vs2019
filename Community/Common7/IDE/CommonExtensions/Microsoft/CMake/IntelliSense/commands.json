{"add_compile_definitions": {"name": "add_compile_definitions", "description": "loc_add_compile_definitions", "syntax_examples": ["add_compile_definitions(<definition> ...)"]}, "add_compile_options": {"name": "add_compile_options", "description": "loc_add_compile_options", "syntax_examples": ["add_compile_options(<option> ...)"]}, "add_custom_command": {"name": "add_custom_command", "description": "loc_add_custom_command", "syntax_examples": ["add_custom_command(OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [BYPRODUCTS [files...]] [IMPLICIT_DEPENDS <lang1> depend1 [<lang2> depend2] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [DEPFILE depfile] [JOB_POOL job_pool] [VERBATIM] [APPEND] [USES_TERMINAL] [COMMAND_EXPAND_LISTS])", "add_custom_command( OUTPUT out.c COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt -o out.c DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt VERBATIM) add_library(myLib out.c)", "add_custom_command(TARGET <target> PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [USES_TERMINAL] [COMMAND_EXPAND_LISTS])"]}, "add_custom_target": {"name": "add_custom_target", "description": "loc_add_custom_target", "syntax_examples": ["add_custom_target(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [JOB_POOL job_pool] [VERBATIM] [USES_TERMINAL] [COMMAND_EXPAND_LISTS] [SOURCES src1 [src2...]])"]}, "add_definitions": {"name": "add_definitions", "description": "loc_add_definitions", "syntax_examples": ["add_definitions(-DFOO -DBAR ...)"]}, "add_dependencies": {"name": "add_dependencies", "description": "loc_add_dependencies", "syntax_examples": ["add_dependencies(<target> [<target-dependency>]...)"]}, "add_executable": {"name": "add_executable", "description": "loc_add_executable", "syntax_examples": ["add_executable(<name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [source1] [source2 ...])", "add_executable(<name> IMPORTED [GLOBAL])", "add_executable(<name> ALIAS <target>)"]}, "add_library": {"name": "add_library", "description": "loc_add_library", "syntax_examples": ["add_library(<name> [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [<source>...])", "add_library(<name> OBJECT [<source>...])", "add_library(... $<TARGET_OBJECTS:objlib> ...) add_executable(... $<TARGET_OBJECTS:objlib> ...)", "add_library(<name> INTERFACE)", "add_library(<name> <type> IMPORTED [GLOBAL])", "add_library(<name> ALIAS <target>)"]}, "add_link_options": {"name": "add_link_options", "description": "loc_add_link_options", "syntax_examples": ["add_link_options(<option> ...)"]}, "add_subdirectory": {"name": "add_subdirectory", "description": "loc_add_subdirectory", "syntax_examples": ["add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])"]}, "add_test": {"name": "add_test", "description": "loc_add_test", "syntax_examples": ["add_test(NAME <name> COMMAND <command> [<arg>...] [CONFIGURATIONS <config>...] [WORKING_DIRECTORY <dir>] [COMMAND_EXPAND_LISTS])", "add_test(NAME mytest COMMAND testDriver --config $<CONFIG> --exe $<TARGET_FILE:myexe>)", "add_test(<name> <command> [<arg>...])"]}, "aux_source_directory": {"name": "aux_source_directory", "description": "loc_aux_source_directory", "syntax_examples": ["aux_source_directory(<dir> <variable>)"]}, "break": {"name": "break", "description": "loc_break", "syntax_examples": ["break()"]}, "build_command": {"name": "build_command", "description": "loc_build_command", "syntax_examples": ["build_command(<variable> [CONFIGURATION <config>] [TARGET <target>] [PROJECT_NAME <projname>])", "build_command(<cachevariable> <makecommand>)"]}, "build_name": {"name": "build_name", "description": "loc_build_name", "syntax_examples": ["build_name(variable)"]}, "cmake_host_system_information": {"name": "cmake_host_system_information", "description": "loc_cmake_host_system_information", "syntax_examples": ["cmake_host_system_information(RESULT <variable> QUERY <key> ...)"]}, "cmake_language": {"name": "cmake_language", "description": "loc_cmake_language", "syntax_examples": ["cmake_language(CALL <command> [<arg>...]) cmake_language(EVAL CODE <code>...) cmake_language(DEFER <options>... CALL <command> [<arg>...])", "cmake_language(CALL <command> [<arg>...])", "cmake_language(EVAL CODE <code>...)", "cmake_language(DEFER <options>... CALL <command> [<arg>...])", "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL_IDS <var>)", "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL <id> <var>)", "cmake_language(DEFER [DIRECTORY <dir>] CANCEL_CALL <id>...)", "cmake_language(DEFER CALL message \"${deferred_message}\") cmake_language(DEFER ID_VAR id CALL message \"Cancelled Message\") cmake_language(DEFER CANCEL_CALL ${id}) message(\"Immediate Message\") set(deferred_message \"Deferred Message\")"]}, "cmake_minimum_required": {"name": "cmake_minimum_required", "description": "loc_cmake_minimum_required", "syntax_examples": ["cmake_minimum_required(VERSION <min>[...<max>] [FATAL_ERROR])"]}, "cmake_parse_arguments": {"name": "cmake_parse_arguments", "description": "loc_cmake_parse_arguments", "syntax_examples": ["cmake_parse_arguments(<prefix> <options> <one_value_keywords> <multi_value_keywords> <args>...) cmake_parse_arguments(PARSE_ARGV <N> <prefix> <options> <one_value_keywords> <multi_value_keywords>)"]}, "cmake_path": {"name": "cmake_path", "description": "loc_cmake_path", "syntax_examples": ["cmake_path(GET <path-var> ROOT_NAME <out-var>) cmake_path(GET <path-var> ROOT_DIRECTORY <out-var>) cmake_path(GET <path-var> ROOT_PATH <out-var>) cmake_path(GET <path-var> FILENAME <out-var>) cmake_path(GET <path-var> EXTENSION [LAST_ONLY] <out-var>) cmake_path(GET <path-var> STEM [LAST_ONLY] <out-var>) cmake_path(GET <path-var> RELATIVE_PART <out-var>) cmake_path(GET <path-var> PARENT_PATH <out-var>)", "cmake_path(HAS_ROOT_NAME <path-var> <out-var>) cmake_path(HAS_ROOT_DIRECTORY <path-var> <out-var>) cmake_path(HAS_ROOT_PATH <path-var> <out-var>) cmake_path(HAS_FILENAME <path-var> <out-var>) cmake_path(HAS_EXTENSION <path-var> <out-var>) cmake_path(HAS_STEM <path-var> <out-var>) cmake_path(HAS_RELATIVE_PART <path-var> <out-var>) cmake_path(HAS_PARENT_PATH <path-var> <out-var>)", "cmake_path(IS_ABSOLUTE <path-var> <out-var>)", "cmake_path(IS_RELATIVE <path-var> <out-var>)", "cmake_path(IS_PREFIX <path-var> <input> [NORMALIZE] <out-var>)", "cmake_path(COMPARE <input1> EQUAL <input2> <out-var>) cmake_path(COMPARE <input1> NOT_EQUAL <input2> <out-var>)", "cmake_path(SET <path-var> [NORMALIZE] <input>)", "cmake_path(APPEND <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])", "cmake_path(APPEND_STRING <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])", "cmake_path(REMOVE_FILENAME <path-var> [OUTPUT_VARIABLE <out-var>])", "cmake_path(REPLACE_FILENAME <path-var> <input> [OUTPUT_VARIABLE <out-var>])", "cmake_path(HAS_FILENAME path has_filename) if(has_filename) cmake_path(REMOVE_FILENAME path) cmake_path(APPEND path input); endif()", "cmake_path(REMOVE_EXTENSION <path-var> [LAST_ONLY] [OUTPUT_VARIABLE <out-var>])", "cmake_path(REPLACE_EXTENSION <path-var> [LAST_ONLY] <input> [OUTPUT_VARIABLE <out-var>])", "cmake_path(REMOVE_EXTENSION path) if(NOT \"input\" MATCHES \"^\\\\.\") cmake_path(APPEND_STRING path \".\") endif() cmake_path(APPEND_STRING path \"input\")", "cmake_path(NORMAL_PATH <path-var> [OUTPUT_VARIABLE <out-var>])", "cmake_path(RELATIVE_PATH <path-var> [BASE_DIRECTORY <input>] [OUTPUT_VARIABLE <out-var>])", "cmake_path(ABSOLUTE_PATH <path-var> [BASE_DIRECTORY <input>] [NORMALIZE] [OUTPUT_VARIABLE <out-var>])", "cmake_path(NATIVE_PATH <path-var> [NORMALIZE] <out-var>)", "cmake_path(CONVERT <input> TO_CMAKE_PATH_LIST <out-var> [NORMALIZE])", "cmake_path(CONVERT <input> TO_NATIVE_PATH_LIST <out-var> [NORMALIZE])", "cmake_path(HASH <path-var> <out-var>)"]}, "cmake_policy": {"name": "cmake_policy", "description": "loc_cmake_policy", "syntax_examples": ["cmake_policy(VERSION <min>[...<max>])", "cmake_policy(SET CMP<NNNN> NEW) cmake_policy(SET CMP<NNNN> OLD)", "cmake_policy(GET CMP<NNNN> <variable>)", "cmake_policy(PUSH) cmake_policy(POP)"]}, "configure_file": {"name": "configure_file", "description": "loc_configure_file", "syntax_examples": ["configure_file(<input> <output> [FILE_PERMISSIONS <permissions>...] [COPYONLY] [ESCAPE_QUOTES] [@ONLY] [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF]])"]}, "continue": {"name": "continue", "description": "loc_continue", "syntax_examples": ["continue()"]}, "create_test_sourcelist": {"name": "create_test_sourcelist", "description": "loc_create_test_sourcelist", "syntax_examples": ["create_test_sourcelist(sourceListName driverName test1 test2 test3 EXTRA_INCLUDE include.h FUNCTION function)"]}, "ctest_build": {"name": "ctest_build", "description": "loc_ctest_build", "syntax_examples": ["ctest_build([BUILD <build-dir>] [APPEND] [CONFIGURATION <config>] [FLAGS <flags>] [PROJECT_NAME <project-name>] [TARGET <target-name>] [NUMBER_ERRORS <num-err-var>] [NUMBER_WARNINGS <num-warn-var>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>])"]}, "ctest_configure": {"name": "ctest_configure", "description": "loc_ctest_configure", "syntax_examples": ["ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND] [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])"]}, "ctest_coverage": {"name": "ctest_coverage", "description": "loc_ctest_coverage", "syntax_examples": ["ctest_coverage([BUILD <build-dir>] [APPEND] [LABELS <label>...] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])"]}, "ctest_empty_binary_directory": {"name": "ctest_empty_binary_directory", "description": "loc_ctest_empty_binary_directory", "syntax_examples": ["ctest_empty_binary_directory( directory )"]}, "ctest_memcheck": {"name": "ctest_memcheck", "description": "loc_ctest_memcheck", "syntax_examples": ["ctest_memcheck([BUILD <build-dir>] [APPEND] [START <start-number>] [END <end-number>] [STRIDE <stride-number>] [EXCLUDE <exclude-regex>] [INCLUDE <include-regex>] [EXCLUDE_LABEL <label-exclude-regex>] [INCLUDE_LABEL <label-include-regex>] [EXCLUDE_FIXTURE <regex>] [EXCLUDE_FIXTURE_SETUP <regex>] [EXCLUDE_FIXTURE_CLEANUP <regex>] [PARALLEL_LEVEL <level>] [TEST_LOAD <threshold>] [SCHEDULE_RANDOM <ON|OFF>] [STOP_TIME <time-of-day>] [RETURN_VALUE <result-var>] [DEFECT_COUNT <defect-count-var>] [QUIET])"]}, "ctest_read_custom_files": {"name": "ctest_read_custom_files", "description": "loc_ctest_read_custom_files", "syntax_examples": ["ctest_read_custom_files( directory ... )"]}, "ctest_run_script": {"name": "ctest_run_script", "description": "loc_ctest_run_script", "syntax_examples": ["ctest_run_script([NEW_PROCESS] script_file_name script_file_name1 script_file_name2 ... [RETURN_VALUE var])"]}, "ctest_sleep": {"name": "ctest_sleep", "description": "loc_ctest_sleep", "syntax_examples": ["ctest_sleep(<seconds>)", "ctest_sleep(<time1> <duration> <time2>)"]}, "ctest_start": {"name": "ctest_start", "description": "loc_ctest_start", "syntax_examples": ["ctest_start(<model> [<source> [<binary>]] [GROUP <group>] [QUIET]) ctest_start([<model> [<source> [<binary>]]] [GROUP <group>] APPEND [QUIET])", "ctest_start(Experimental GROUP GroupExperimental)", "ctest_start(APPEND)", "ctest_start(Experimental path/to/source path/to/binary GROUP SomeGroup QUIET APPEND) ctest_start(GROUP SomeGroup Experimental QUIET path/to/source APPEND path/to/binary) ctest_start(APPEND QUIET Experimental path/to/source GROUP SomeGroup path/to/binary)"]}, "ctest_submit": {"name": "ctest_submit", "description": "loc_ctest_submit", "syntax_examples": ["ctest_submit([PARTS <part>...] [FILES <file>...] [SUBMIT_URL <url>] [BUILD_ID <result-var>] [HTTPHEADER <header>] [RETRY_COUNT <count>] [RETRY_DELAY <delay>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])", "ctest_submit(HTTPHEADER \"Authorization: Bearer <auth-token>\")", "ctest_submit(CDASH_UPLOAD <file> [CDASH_UPLOAD_TYPE <type>] [SUBMIT_URL <url>] [BUILD_ID <result-var>] [HTTPHEADER <header>] [RETRY_COUNT <count>] [RETRY_DELAY <delay>] [RETURN_VALUE <result-var>] [QUIET])"]}, "ctest_test": {"name": "ctest_test", "description": "loc_ctest_test", "syntax_examples": ["ctest_test([BUILD <build-dir>] [APPEND] [START <start-number>] [END <end-number>] [STRIDE <stride-number>] [EXCLUDE <exclude-regex>] [INCLUDE <include-regex>] [EXCLUDE_LABEL <label-exclude-regex>] [INCLUDE_LABEL <label-include-regex>] [EXCLUDE_FIXTURE <regex>] [EXCLUDE_FIXTURE_SETUP <regex>] [EXCLUDE_FIXTURE_CLEANUP <regex>] [PARALLEL_LEVEL <level>] [RESOURCE_SPEC_FILE <file>] [TEST_LOAD <threshold>] [SCHEDULE_RANDOM <ON|OFF>] [STOP_ON_FAILURE] [STOP_TIME <time-of-day>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [REPEAT <mode>:<n>] [QUIET])"]}, "ctest_update": {"name": "ctest_update", "description": "loc_ctest_update", "syntax_examples": ["ctest_update([SOURCE <source-dir>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])"]}, "ctest_upload": {"name": "ctest_upload", "description": "loc_ctest_upload", "syntax_examples": ["ctest_upload(FILES <file>... [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])"]}, "define_property": {"name": "define_property", "description": "loc_define_property", "syntax_examples": ["define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE | TEST | VARIABLE | CACHED_VARIABLE> PROPERTY <name> [INHERITED] BRIEF_DOCS <brief-doc> [docs...] FULL_DOCS <full-doc> [docs...])"]}, "else": {"name": "else", "description": "loc_else", "syntax_examples": ["else([<condition>])"]}, "elseif": {"name": "elseif", "description": "loc_elseif", "syntax_examples": ["elseif(<condition>)"]}, "enable_language": {"name": "enable_language", "description": "loc_enable_language", "syntax_examples": ["enable_language(<lang> [OPTIONAL])"]}, "enable_testing": {"name": "enable_testing", "description": "loc_enable_testing", "syntax_examples": ["enable_testing()"]}, "endforeach": {"name": "endforeach", "description": "loc_endforeach", "syntax_examples": ["endforeach([<loop_var>])"]}, "endfunction": {"name": "endfunction", "description": "loc_endfunction", "syntax_examples": ["endfunction([<name>])"]}, "endif": {"name": "endif", "description": "loc_endif", "syntax_examples": ["endif([<condition>])"]}, "endmacro": {"name": "endmacro", "description": "loc_endmacro", "syntax_examples": ["endmacro([<name>])"]}, "endwhile": {"name": "endwhile", "description": "loc_endwhile", "syntax_examples": ["endwhile([<condition>])"]}, "execute_process": {"name": "execute_process", "description": "loc_execute_process", "syntax_examples": ["execute_process(COMMAND <cmd1> [<arguments>] [COMMAND <cmd2> [<arguments>]]... [WORKING_DIRECTORY <directory>] [TIMEOUT <seconds>] [RESULT_VARIABLE <variable>] [RESULTS_VARIABLE <variable>] [OUTPUT_VARIABLE <variable>] [ERROR_VARIABLE <variable>] [INPUT_FILE <file>] [OUTPUT_FILE <file>] [ERROR_FILE <file>] [OUTPUT_QUIET] [ERROR_QUIET] [COMMAND_ECHO <where>] [OUTPUT_STRIP_TRAILING_WHITESPACE] [ERROR_STRIP_TRAILING_WHITESPACE] [ENCODING <name>] [ECHO_OUTPUT_VARIABLE] [ECHO_ERROR_VARIABLE] [COMMAND_ERROR_IS_FATAL <ANY|LAST>])"]}, "exec_program": {"name": "exec_program", "description": "loc_exec_program", "syntax_examples": ["exec_program(Executable [directory in which to run] [ARGS <arguments to executable>] [OUTPUT_VARIABLE <var>] [RETURN_VALUE <var>])"]}, "export": {"name": "export", "description": "loc_export", "syntax_examples": ["export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])", "export(TARGETS [target1 [target2 [...]]] [NAMESPACE <namespace>] [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES])", "export(PACKAGE <PackageName>)", "export(TARGETS [target1 [target2 [...]]] [ANDROID_MK <filename>])"]}, "export_library_dependencies": {"name": "export_library_dependencies", "description": "loc_export_library_dependencies", "syntax_examples": ["export_library_dependencies(<file> [APPEND])"]}, "file": {"name": "file", "description": "loc_file", "syntax_examples": ["file(READ <filename> <variable> [OFFSET <offset>] [LIMIT <max-in>] [HEX])", "file(STRINGS <filename> <variable> [<options>...])", "file(STRINGS myfile.txt myfile)", "file(<HASH> <filename> <variable>)", "file(TIMESTAMP <filename> <variable> [<format>] [UTC])", "file(GET_RUNTIME_DEPENDENCIES [RESOLVED_DEPENDENCIES_VAR <deps_var>] [UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>] [CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>] [EXECUTABLES [<executable_files>...]] [LIBRARIES [<library_files>...]] [MODULES [<module_files>...]] [DIRECTORIES [<directories>...]] [BUNDLE_EXECUTABLE <bundle_executable_file>] [PRE_INCLUDE_REGEXES [<regexes>...]] [PRE_EXCLUDE_REGEXES [<regexes>...]] [POST_INCLUDE_REGEXES [<regexes>...]] [POST_EXCLUDE_REGEXES [<regexes>...]])", "file(GET_RUNTIME_DEPENDENCIES PRE_INCLUDE_REGEXES \"^[Mm][Yy][Ll][Ii][Bb][Rr][Aa][Rr][Yy]\\\\.[Dd][Ll][Ll]$\" )", "file(GET_RUNTIME_DEPENDENCIES PRE_INCLUDE_REGEXES \"^mylibrary\\\\.dll$\" )", "file(WRITE <filename> <content>...) file(APPEND <filename> <content>...)", "file(TOUCH [<files>...]) file(TOUCH_NOCREATE [<files>...])", "file(GENERATE OUTPUT output-file <INPUT input-file|CONTENT content> [CONDITION expression] [TARGET target] [FILE_PERMISSIONS <permissions>...] [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF]])", "file(CONFIGURE OUTPUT output-file CONTENT content [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF]])", "file(GLOB <variable> [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS] [<globbing-expressions>...]) file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS] [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS] [<globbing-expressions>...])", "file(RENAME <oldname> <newname>)", "file(REMOVE [<files>...]) file(REMOVE_RECURSE [<files>...])", "file(MAKE_DIRECTORY [<directories>...])", "file(<COPY|INSTALL> <files>... DESTINATION <dir> [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...] [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS] [FOLLOW_SYMLINK_CHAIN] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS <permissions>...]] [...])", "file(COPY /opt/foo/lib/libfoo.so DESTINATION lib FOLLOW_SYMLINK_CHAIN)", "file(SIZE <filename> <variable>)", "file(READ_SYMLINK <linkname> <variable>)", "file(CREATE_LINK <original> <linkname> [RESULT <result>] [COPY_ON_ERROR] [SYMBOLIC])", "file(CHMOD <files>... <directories>... [PERMISSIONS <permissions>...] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...])", "file(CHMOD_RECURSE <files>... <directories>... [PERMISSIONS <permissions>...] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...])", "file(REAL_PATH <path> <out-var> [BASE_DIRECTORY <dir>])", "file(RELATIVE_PATH <variable> <directory> <file>)", "file(TO_CMAKE_PATH \"<path>\" <variable>) file(TO_NATIVE_PATH \"<path>\" <variable>)", "file(DOWNLOAD <url> [<file>] [<options>...]) file(UPLOAD <file> <url> [<options>...])", "file(LOCK <path> [DIRECTORY] [RELEASE] [GUARD <FUNCTION|FILE|PROCESS>] [RESULT_VARIABLE <variable>] [TIMEOUT <seconds>])", "file(ARCHIVE_CREATE OUTPUT <archive> PATHS <paths>... [FORMAT <format>] [COMPRESSION <compression> [COMPRESSION_LEVEL <compression-level>]] [MTIME <mtime>] [VERBOSE])", "file(ARCHIVE_EXTRACT INPUT <archive> [DESTINATION <dir>] [PATTERNS <patterns>...] [LIST_ONLY] [VERBOSE])"]}, "find_file": {"name": "find_file", "description": "loc_find_file", "syntax_examples": ["find_file(<VAR> name1 [path1 path2 ...])", "find_file(<VAR> name | NAMES name1 [name2 ...] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])"]}, "find_library": {"name": "find_library", "description": "loc_find_library", "syntax_examples": ["find_library(<VAR> name1 [path1 path2 ...])", "find_library (<VAR> name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])"]}, "find_package": {"name": "find_package", "description": "loc_find_package", "syntax_examples": ["find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [NO_POLICY_SCOPE])", "find_package(<PackageName> [version] [EXACT] [QUIET] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [CONFIG|NO_MODULE] [NO_POLICY_SCOPE] [NAMES name1 [name2 ...]] [CONFIGS config1 [config2 ...]] [HINTS path1 [path2 ... ]] [PATHS path1 [path2 ... ]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_PACKAGE_REGISTRY] [NO_CMAKE_BUILDS_PATH] [NO_CMAKE_SYSTEM_PATH] [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])"]}, "find_path": {"name": "find_path", "description": "loc_find_path", "syntax_examples": ["find_path(<VAR> name1 [path1 path2 ...])", "find_path (<VAR> name | NAMES name1 [name2 ...] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])"]}, "find_program": {"name": "find_program", "description": "loc_find_program", "syntax_examples": ["find_program(<VAR> name1 [path1 path2 ...])", "find_program (<VAR> name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])"]}, "fltk_wrap_ui": {"name": "fltk_wrap_ui", "description": "loc_fltk_wrap_ui", "syntax_examples": ["fltk_wrap_ui(resultingLibraryName source1 source2 ... sourceN )"]}, "foreach": {"name": "foreach", "description": "loc_foreach", "syntax_examples": ["foreach(<loop_var> <items>) <commands> endforeach()", "foreach(<loop_var> RANGE <stop>)", "foreach(<loop_var> RANGE <start> <stop> [<step>])", "foreach(<loop_var> IN [LISTS [<lists>]] [ITEMS [<items>]])", "foreach(<loop_var>... IN ZIP_LISTS <lists>)"]}, "function": {"name": "function", "description": "loc_function", "syntax_examples": ["function(<name> [<arg1> ...]) <commands> endfunction()", "function(foo) <commands> endfunction()"]}, "get_cmake_property": {"name": "get_cmake_property", "description": "loc_get_cmake_property", "syntax_examples": ["get_cmake_property(<var> <property>)"]}, "get_directory_property": {"name": "get_directory_property", "description": "loc_get_directory_property", "syntax_examples": ["get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)", "get_directory_property(<variable> [DIRECTORY <dir>] DEFINITION <var-name>)"]}, "get_filename_component": {"name": "get_filename_component", "description": "loc_get_filename_component", "syntax_examples": ["get_filename_component(<var> <FileName> <mode> [CACHE])", "get_filename_component(<var> <FileName> <mode> [BASE_DIR <dir>] [CACHE])", "get_filename_component(<var> <FileName> PROGRAM [PROGRAM_ARGS <arg_var>] [CACHE])"]}, "get_property": {"name": "get_property", "description": "loc_get_property", "syntax_examples": ["get_property(<variable> <GLOBAL | DIRECTORY [<dir>] | TARGET <target> | SOURCE <source> | [DIRECTORY <dir> | TARGET_DIRECTORY <target>] | INSTALL <file> | TEST <test> | CACHE <entry> | VARIABLE > PROPERTY <name> [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])"]}, "get_source_file_property": {"name": "get_source_file_property", "description": "loc_get_source_file_property", "syntax_examples": ["get_source_file_property(<variable> <file> [DIRECTORY <dir> | TARGET_DIRECTORY <target>] <property>)"]}, "get_target_property": {"name": "get_target_property", "description": "loc_get_target_property", "syntax_examples": ["get_target_property(<VAR> target property)"]}, "get_test_property": {"name": "get_test_property", "description": "loc_get_test_property", "syntax_examples": ["get_test_property(test property VAR)"]}, "if": {"name": "if", "description": "loc_if", "syntax_examples": ["if(<condition>) <commands> elseif(<condition>) <commands> else() <commands> endif()", "if(var1)", "if(var2)"]}, "include": {"name": "include", "description": "loc_include", "syntax_examples": ["include(<file|module> [OPTIONAL] [RESULT_VARIABLE <var>] [NO_POLICY_SCOPE])"]}, "include_directories": {"name": "include_directories", "description": "loc_include_directories", "syntax_examples": ["include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])"]}, "include_external_msproject": {"name": "include_external_msproject", "description": "loc_include_external_msproject", "syntax_examples": ["include_external_msproject(projectname location [TYPE projectTypeGUID] [GUID projectGUID] [PLATFORM platformName] dep1 dep2 ...)"]}, "include_guard": {"name": "include_guard", "description": "loc_include_guard", "syntax_examples": ["include_guard([DIRECTORY|GLOBAL])"]}, "include_regular_expression": {"name": "include_regular_expression", "description": "loc_include_regular_expression", "syntax_examples": ["include_regular_expression(regex_match [regex_complain])"]}, "install": {"name": "install", "description": "loc_install", "syntax_examples": ["install(TARGETS <target>... [...]) install({FILES | PROGRAMS} <file>... [...]) install(DIRECTORY <dir>... [...]) install(SCRIPT <file> [...]) install(CODE <code> [...]) install(EXPORT <export-name> [...])", "install(TARGETS target CONFIGURATIONS Debug RUNTIME DESTINATION Debug/bin) install(TARGETS target CONFIGURATIONS Release RUNTIME DESTINATION Release/bin)", "install(TARGETS targets... [EXPORT <export-name>] [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE| PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [NAMELINK_COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] [NAMELINK_ONLY|NAMELINK_SKIP]] [...] [INCLUDES DESTINATION [<dir> ...]])", "install(TARGETS mylib LIBRARY COMPONENT Libraries NAMELINK_COMPONENT Development PUBLIC_HEADER COMPONENT Development )", "install(TARGETS myExe mySharedLib myStaticLib RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib/static) install(TARGETS mySharedLib DESTINATION /some/full/path)", "install(<FILES|PROGRAMS> files... TYPE <type> | DESTINATION <dir> [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])", "install(DIRECTORY dirs... TYPE <type> | DESTINATION <dir> [FILE_PERMISSIONS permissions...] [DIRECTORY_PERMISSIONS permissions...] [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [EXCLUDE_FROM_ALL] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS permissions...]] [...])", "install(DIRECTORY src/ DESTINATION include/myproj FILES_MATCHING PATTERN \"*.h\")", "install(DIRECTORY icons scripts/ DESTINATION share/myproj PATTERN \"CVS\" EXCLUDE PATTERN \"scripts/*\" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)", "install([[SCRIPT <file>] [CODE <code>]] [COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])", "install(CODE \"MESSAGE(\\\"Sample install message.\\\")\")", "install(EXPORT <export-name> DESTINATION <dir> [NAMESPACE <namespace>] [[FILE <name>.cmake]| [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [EXPORT_LINK_INTERFACE_LIBRARIES] [COMPONENT <component>] [EXCLUDE_FROM_ALL]) install(EXPORT_ANDROID_MK <export-name> DESTINATION <dir> [...])", "install(TARGETS myexe EXPORT myproj DESTINATION bin) install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj) install(EXPORT_ANDROID_MK myproj DESTINATION share/ndk-modules)"]}, "install_files": {"name": "install_files", "description": "loc_install_files", "syntax_examples": ["install_files(<dir> extension file file ...)", "install_files(<dir> regexp)", "install_files(<dir> FILES file file ...)"]}, "install_programs": {"name": "install_programs", "description": "loc_install_programs", "syntax_examples": ["install_programs(<dir> file1 file2 [file3 ...]) install_programs(<dir> FILES file1 [file2 ...])", "install_programs(<dir> regexp)"]}, "install_targets": {"name": "install_targets", "description": "loc_install_targets", "syntax_examples": ["install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)"]}, "link_directories": {"name": "link_directories", "description": "loc_link_directories", "syntax_examples": ["link_directories([AFTER|BEFORE] directory1 [directory2 ...])"]}, "link_libraries": {"name": "link_libraries", "description": "loc_link_libraries", "syntax_examples": ["link_libraries([item1 [item2 [...]]] [[debug|optimized|general] <item>] ...)"]}, "list": {"name": "list", "description": "loc_list", "syntax_examples": ["list(LENGTH <list> <output variable>)", "list(GET <list> <element index> [<element index> ...] <output variable>)", "list(JOIN <list> <glue> <output variable>)", "list(SUBLIST <list> <begin> <length> <output variable>)", "list(FIND <list> <value> <output variable>)", "list(APPEND <list> [<element> ...])", "list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)", "list(INSERT <list> <element_index> <element> [<element> ...])", "list(POP_BACK <list> [<out-var>...])", "list(POP_FRONT <list> [<out-var>...])", "list(PREPEND <list> [<element> ...])", "list(REMOVE_ITEM <list> <value> [<value> ...])", "list(REMOVE_AT <list> <index> [<index> ...])", "list(REMOVE_DUPLICATES <list>)", "list(TRANSFORM <list> <ACTION> [<SELECTOR>] [OUTPUT_VARIABLE <output variable>])", "list(TRANSFORM <list> <APPEND|PREPEND> <value> ...)", "list(TRANSFORM <list> <TOLOWER|TOUPPER> ...)", "list(TRANSFORM <list> STRIP ...)", "list(TRANSFORM <list> GENEX_STRIP ...)", "list(TRANSFORM <list> REPLACE <regular_expression> <replace_expression> ...)", "list(TRANSFORM <list> <ACTION> AT <index> [<index> ...] ...)", "list(TRANSFORM <list> <ACTION> FOR <start> <stop> [<step>] ...)", "list(TRANSFORM <list> <ACTION> REGEX <regular_expression> ...)", "list(REVERSE <list>)", "list(SORT <list> [COMPARE <compare>] [CASE <case>] [ORDER <order>])"]}, "load_cache": {"name": "load_cache", "description": "loc_load_cache", "syntax_examples": ["load_cache(pathToBuildDirectory READ_WITH_PREFIX prefix entry1...)", "load_cache(pathToBuildDirectory [EXCLUDE entry1...] [INCLUDE_INTERNALS entry1...])"]}, "load_command": {"name": "load_command", "description": "loc_load_command", "syntax_examples": ["load_command(COMMAND_NAME <loc1> [loc2 ...])"]}, "macro": {"name": "macro", "description": "loc_macro", "syntax_examples": ["macro(<name> [<arg1> ...]) <commands> endmacro()", "macro(foo) <commands> endmacro()", "macro(bar) foreach(arg IN LISTS ARGN) <commands> endforeach() endmacro() function(foo) bar(x y z) endfunction() foo(a b c)"]}, "make_directory": {"name": "make_directory", "description": "loc_make_directory", "syntax_examples": ["make_directory(directory)"]}, "mark_as_advanced": {"name": "mark_as_advanced", "description": "loc_mark_as_advanced", "syntax_examples": ["mark_as_advanced([CLEAR|FORCE] <var1> ...)"]}, "math": {"name": "math", "description": "loc_math", "syntax_examples": ["math(EXPR <variable> \"<expression>\" [OUTPUT_FORMAT <format>])", "math(EXPR value \"100 * 0xA\" OUTPUT_FORMAT DECIMAL) math(EXPR value \"100 * 0xA\" OUTPUT_FORMAT HEXADECIMAL)"]}, "message": {"name": "message", "description": "loc_message", "syntax_examples": ["message([<mode>] \"message text\" ...)", "message(STATUS \"Looking for someheader.h\") if(checkSuccess) message(STATUS \"Looking for someheader.h - found\") else() message(STATUS \"Looking for someheader.h - not found\") endif()", "message(<checkState> \"message\" ...)", "message(CHECK_START \"Finding my things\") list(APPEND CMAKE_MESSAGE_INDENT \" \") unset(missingComponents) message(CHECK_START \"Finding partA\") message(CHECK_PASS \"found\") message(CHECK_START \"Finding partB\") list(APPEND missingComponents B) message(CHECK_FAIL \"not found\") list(POP_BACK CMAKE_MESSAGE_INDENT) if(missingComponents) message(CHECK_FAIL \"missing components: ${missingComponents}\") else() message(CHECK_PASS \"all components found\") endif()"]}, "option": {"name": "option", "description": "loc_option", "syntax_examples": ["option(<variable> \"<help_text>\" [value])"]}, "output_required_files": {"name": "output_required_files", "description": "loc_output_required_files", "syntax_examples": ["output_required_files(srcfile outputfile)"]}, "project": {"name": "project", "description": "loc_project", "syntax_examples": ["project(<PROJECT-NAME> [<language-name>...]) project(<PROJECT-NAME> [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]] [DESCRIPTION <project-description-string>] [HOMEPAGE_URL <url-string>] [LANGUAGES <language-name>...])"]}, "qt_wrap_cpp": {"name": "qt_wrap_cpp", "description": "loc_qt_wrap_cpp", "syntax_examples": ["qt_wrap_cpp(resultingLibraryName DestName SourceLists ...)"]}, "qt_wrap_ui": {"name": "qt_wrap_ui", "description": "loc_qt_wrap_ui", "syntax_examples": ["qt_wrap_ui(resultingLibraryName HeadersDestName SourcesDestName SourceLists ...)"]}, "remove": {"name": "remove", "description": "loc_remove", "syntax_examples": ["remove(VAR VALUE VALUE ...)"]}, "remove_definitions": {"name": "remove_definitions", "description": "loc_remove_definitions", "syntax_examples": ["remove_definitions(-DFOO -DBAR ...)"]}, "return": {"name": "return", "description": "loc_return", "syntax_examples": ["return()"]}, "separate_arguments": {"name": "separate_arguments", "description": "loc_separate_arguments", "syntax_examples": ["separate_arguments(<variable> <mode> [PROGRAM [SEPARATE_ARGS]] <args>)", "separate_arguments (out UNIX_COMMAND PROGRAM \"cc -c main.c\")", "separate_arguments (out UNIX_COMMAND PROGRAM SEPARATE_ARGS \"cc -c main.c\")", "separate_arguments(<var>)"]}, "set": {"name": "set", "description": "loc_set", "syntax_examples": ["set(<variable> <value>... [PARENT_SCOPE])", "set(<variable> <value>... CACHE <type> <docstring> [FORCE])", "set(ENV{<variable>} [<value>])"]}, "set_directory_properties": {"name": "set_directory_properties", "description": "loc_set_directory_properties", "syntax_examples": ["set_directory_properties(PROPERTIES prop1 value1 [prop2 value2] ...)"]}, "set_property": {"name": "set_property", "description": "loc_set_property", "syntax_examples": ["set_property(<GLOBAL | DIRECTORY [<dir>] | TARGET [<target1> ...] | SOURCE [<src1> ...] [DIRECTORY <dirs> ...] | [TARGET_DIRECTORY <targets> ...] INSTALL [<file1> ...] | TEST [<test1> ...] | CACHE [<entry1> ...]> [APPEND] [APPEND_STRING] PROPERTY <name> [<value1> ...])"]}, "set_source_files_properties": {"name": "set_source_files_properties", "description": "loc_set_source_files_properties", "syntax_examples": ["set_source_files_properties(<files> ... [DIRECTORY <dirs> ...] [TARGET_DIRECTORY <targets> ...] PROPERTIES <prop1> <value1> [<prop2> <value2>] ...)"]}, "set_target_properties": {"name": "set_target_properties", "description": "loc_set_target_properties", "syntax_examples": ["set_target_properties(target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ...)"]}, "set_tests_properties": {"name": "set_tests_properties", "description": "loc_set_tests_properties", "syntax_examples": ["set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)"]}, "site_name": {"name": "site_name", "description": "loc_site_name", "syntax_examples": ["site_name(variable)"]}, "source_group": {"name": "source_group", "description": "loc_source_group", "syntax_examples": ["source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>]) source_group(TREE <root> [PREFIX <prefix>] [FILES <src>...])", "source_group(base/subdir ...) source_group(outer\\\\inner ...) source_group(TREE <root> PREFIX sources\\\\inc ...)", "source_group(<name> <regex>)", "source_group(<name> REGULAR_EXPRESSION <regex>)"]}, "string": {"name": "string", "description": "loc_string", "syntax_examples": ["string(FIND <string> <substring> <output_variable> [REVERSE])", "string(REPLACE <match_string> <replace_string> <output_variable> <input> [<input>...])", "string(REGEX MATCH <regular_expression> <output_variable> <input> [<input>...])", "string(REGEX MATCHALL <regular_expression> <output_variable> <input> [<input>...])", "string(REGEX REPLACE <regular_expression> <replacement_expression> <output_variable> <input> [<input>...])", "string(APPEND <string_variable> [<input>...])", "string(PREPEND <string_variable> [<input>...])", "string(CONCAT <output_variable> [<input>...])", "string(JOIN <glue> <output_variable> [<input>...])", "string(TOLOWER <string> <output_variable>)", "string(TOUPPER <string> <output_variable>)", "string(LENGTH <string> <output_variable>)", "string(SUBSTRING <string> <begin> <length> <output_variable>)", "string(STRIP <string> <output_variable>)", "string(GENEX_STRIP <string> <output_variable>)", "string(REPEAT <string> <count> <output_variable>)", "string(COMPARE LESS <string1> <string2> <output_variable>) string(COMPARE GREATER <string1> <string2> <output_variable>) string(COMPARE EQUAL <string1> <string2> <output_variable>) string(COMPARE NOTEQUAL <string1> <string2> <output_variable>) string(COMPARE LESS_EQUAL <string1> <string2> <output_variable>) string(COMPARE GREATER_EQUAL <string1> <string2> <output_variable>)", "string(<HASH> <output_variable> <input>)", "string(ASCII <number> [<number> ...] <output_variable>)", "string(HEX <string> <output_variable>)", "string(CONFIGURE <string> <output_variable> [@ONLY] [ESCAPE_QUOTES])", "string(MAKE_C_IDENTIFIER <string> <output_variable>)", "string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <output_variable>)", "string(TIMESTAMP <output_variable> [<format_string>] [UTC])", "string(UUID <output_variable> NAMESPACE <namespace> NAME <name> TYPE <MD5|SHA1> [UPPER])", "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] GET <json-string> <member|index> [<member|index> ...])", "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] TYPE <json-string> <member|index> [<member|index> ...])", "string(JSON <out-var> [ERROR_VARIABLE <error-var>] MEMBER <json-string> [<member|index> ...] <index>)", "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] LENGTH <json-string> <member|index> [<member|index> ...])", "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] REMOVE <json-string> <member|index> [<member|index> ...])", "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] SET <json-string> <member|index> [<member|index> ...] <value>)", "string(JSON <out-var> [ERROR_VARIABLE <error-var>] EQUAL <json-string1> <json-string2>)"]}, "subdirs": {"name": "subdirs", "description": "loc_subdirs", "syntax_examples": ["subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...] [PREORDER])"]}, "subdir_depends": {"name": "subdir_depends", "description": "loc_subdir_depends", "syntax_examples": ["subdir_depends(subdir dep1 dep2 ...)"]}, "target_compile_definitions": {"name": "target_compile_definitions", "description": "loc_target_compile_definitions", "syntax_examples": ["target_compile_definitions(<target> <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])", "target_compile_definitions(foo PUBLIC FOO) target_compile_definitions(foo PUBLIC -DFOO) target_compile_definitions(foo PUBLIC \"\" FOO) target_compile_definitions(foo PUBLIC -D FOO)", "target_compile_definitions(foo PUBLIC FOO=1)"]}, "target_compile_features": {"name": "target_compile_features", "description": "loc_target_compile_features", "syntax_examples": ["target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])"]}, "target_compile_options": {"name": "target_compile_options", "description": "loc_target_compile_options", "syntax_examples": ["target_compile_options(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"]}, "target_include_directories": {"name": "target_include_directories", "description": "loc_target_include_directories", "syntax_examples": ["target_include_directories(<target> [SYSTEM] [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])", "target_include_directories(mylib PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib> $<INSTALL_INTERFACE:include/mylib>)"]}, "target_link_directories": {"name": "target_link_directories", "description": "loc_target_link_directories", "syntax_examples": ["target_link_directories(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"]}, "target_link_libraries": {"name": "target_link_libraries", "description": "loc_target_link_libraries", "syntax_examples": ["target_link_libraries(<target> ... <item>... ...)", "target_link_libraries(<target> <PRIVATE|PUBLIC|INTERFACE> <item>... [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)", "target_link_libraries(<target> <item>...)", "target_link_libraries(<target> <LINK_PRIVATE|LINK_PUBLIC> <lib>... [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)", "target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)"]}, "target_link_options": {"name": "target_link_options", "description": "loc_target_link_options", "syntax_examples": ["target_link_options(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"]}, "target_precompile_headers": {"name": "target_precompile_headers", "description": "loc_target_precompile_headers", "syntax_examples": ["target_precompile_headers(<target> <INTERFACE|PUBLIC|PRIVATE> [header1...] [<INTERFACE|PUBLIC|PRIVATE> [header2...] ...])", "target_precompile_headers(myTarget PUBLIC project_header.h PRIVATE [[\"other_header.h\"]] <unordered_map>)", "target_precompile_headers(mylib PRIVATE \"$<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/cxx_only.h>\" \"$<$<COMPILE_LANGUAGE:C>:<stddef.h$<ANGLE-R>>\" \"$<$<COMPILE_LANGUAGE:CXX>:<cstddef$<ANGLE-R>>\" )", "target_precompile_headers(<target> REUSE_FROM <other_target>)"]}, "target_sources": {"name": "target_sources", "description": "loc_target_sources", "syntax_examples": ["target_sources(<target> <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"]}, "try_compile": {"name": "try_compile", "description": "loc_try_compile", "syntax_examples": ["try_compile(<resultVar> <bindir> <srcdir> <projectName> [<targetName>] [CMAKE_FLAGS <flags>...] [OUTPUT_VARIABLE <var>])", "try_compile(<resultVar> <bindir> <srcfile|SOURCES srcfile...> [CMAKE_FLAGS <flags>...] [COMPILE_DEFINITIONS <defs>...] [LINK_OPTIONS <options>...] [LINK_LIBRARIES <libs>...] [OUTPUT_VARIABLE <var>] [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]] [<LANG>_STANDARD <std>] [<LANG>_STANDARD_REQUIRED <bool>] [<LANG>_EXTENSIONS <bool>])"]}, "try_run": {"name": "try_run", "description": "loc_try_run", "syntax_examples": ["try_run(<runResultVar> <compileResultVar> <bindir> <srcfile> [CMAKE_FLAGS <flags>...] [COMPILE_DEFINITIONS <defs>...] [LINK_OPTIONS <options>...] [LINK_LIBRARIES <libs>...] [COMPILE_OUTPUT_VARIABLE <var>] [RUN_OUTPUT_VARIABLE <var>] [OUTPUT_VARIABLE <var>] [WORKING_DIRECTORY <var>] [ARGS <args>...])"]}, "unset": {"name": "unset", "description": "loc_unset", "syntax_examples": ["unset(<variable> [CACHE | PARENT_SCOPE])", "unset(ENV{<variable>})"]}, "use_mangled_mesa": {"name": "use_mangled_mesa", "description": "loc_use_mangled_mesa", "syntax_examples": ["use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)"]}, "utility_source": {"name": "utility_source", "description": "loc_utility_source", "syntax_examples": ["utility_source(cache_entry executable_name path_to_source [file1 file2 ...])"]}, "variable_requires": {"name": "variable_requires", "description": "loc_variable_requires", "syntax_examples": ["variable_requires(TEST_VARIABLE RESULT_VARIABLE REQUIRED_VARIABLE1 REQUIRED_VARIABLE2 ...)"]}, "variable_watch": {"name": "variable_watch", "description": "loc_variable_watch", "syntax_examples": ["variable_watch(<variable> [<command>])"]}, "while": {"name": "while", "description": "loc_while", "syntax_examples": ["while(<condition>) <commands> endwhile()"]}, "write_file": {"name": "write_file", "description": "loc_write_file", "syntax_examples": ["write_file(filename \"message to write\"... [APPEND])"]}}